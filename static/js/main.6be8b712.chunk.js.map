{"version":3,"sources":["components/Image/view.jsx","components/Gallery/view.jsx","utils/validation.js","redux/actions.js","redux/actionTypes.js","components/Gallery/handlers.js","components/Gallery/container.js","App.js","redux/reducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["Image","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","intersected","observer","_this2","IntersectionObserver","entries","isIntersecting","setState","disconnect","observe","imgTag","img","tag","date","description","_this3","_this$props","image","openLightbox","index","react_default","a","createElement","src","IMAGE","alt","DESCRIPTION","className","onClick","TAG","DATE","ref","elem","PureComponent","Gallery","photoIndex","isOpen","handleRequestImages","images","handleSortImages","_this$state","Fragment","react_select_esm","defaultValue","label","value","options","onChange","sortType","map","i","view","key","index_es","mainSrc","nextSrc","length","prevSrc","imageTitle","concat","imageCaption","onCloseRequest","onMovePrevRequest","onMoveNextRequest","formatResponse","response","Date","parse","toLocaleDateString","objectSpread","mockPromise","Promise","resolve","setTimeout","mockData","returnImages","type","dispatch","_ref","asyncToGenerator","regenerator_default","mark","_callee","cleanResponse","wrap","_context","prev","next","sent","abrupt","t0","console","error","stop","_x","apply","arguments","connect","sorted_by_date_desc","slice","sort","b","sorted_by_date_asc","sorted_by_active","ACTIVE","App","container","initialState","store","createStore","undefined","action","assign","compose","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6be8b712.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\n\r\nclass Image extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { intersected: false };\r\n    this.observer = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Observe the elements in the view and determine if they intersect\r\n    this.observer = new IntersectionObserver(entries => {\r\n      const image = entries[0];\r\n      if (image.isIntersecting) {\r\n        this.setState({ intersected: true });\r\n        this.observer.disconnect();\r\n      }\r\n    });\r\n    this.observer.observe(this.imgTag);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.observer.disconnect();\r\n  }\r\n\r\n  render() {\r\n    const { image, openLightbox, index } = this.props;\r\n\r\n    // Declare the properties of image box\r\n    let img, tag, date, description;\r\n    // Define the values of image box if the element is intersected (\"in view\")\r\n    if(this.state.intersected) {\r\n      img = <img\r\n        src={image.IMAGE}\r\n        alt={image.DESCRIPTION || ''}\r\n        className='base-image'\r\n        onClick={() => openLightbox(index)}\r\n      />\r\n      tag = <p>{image.TAG}</p>\r\n      date = <p>{image.DATE}</p>\r\n      description = <p>{image.DESCRIPTION}</p>\r\n    }\r\n    // Return the image box\r\n    return (\r\n      <div\r\n        ref={elem => (this.imgTag = elem)}\r\n        className=\"image-wrapper\"\r\n      >\r\n        <div className=\"intro-text\">\r\n          {tag}\r\n          {date}\r\n        </div>\r\n        {img}\r\n        {description}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Image;","import React, { PureComponent } from 'react';\r\nimport { Image } from '../Image';\r\nimport Select from 'react-select';\r\nimport Lightbox from 'react-image-lightbox';\r\n\r\nclass Gallery extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      photoIndex: 0,\r\n      isOpen: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { handleRequestImages } = this.props;\r\n    handleRequestImages();\r\n  }\r\n\r\n  render() {\r\n    const { images, handleSortImages } = this.props;\r\n    const { photoIndex, isOpen } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <header className=\"header\">\r\n          <h1>PS Gallery</h1>\r\n          <Select\r\n            defaultValue={{ label: 'Select a Filter', value: 'Filter' }}\r\n            options={[\r\n              {label: 'Date (old to new)', value: 'sort_by_date_asc'},\r\n              {label: 'Date (new to old)', value: 'sort_by_date_desc'},\r\n              {label: 'Active', value: 'sort_by_active'}\r\n            ]}\r\n            onChange={(sortType) => handleSortImages(sortType.value, images)}\r\n            className='select-dialog'\r\n          />\r\n        </header>\r\n        <div className=\"grid\">\r\n          {images && images.map((image, i) => (\r\n            <Image\r\n              image={image}\r\n              key={i}\r\n              index={i}\r\n              openLightbox={(key) => this.setState({ isOpen: true, photoIndex: key })}\r\n            />\r\n          ))}\r\n        </div>\r\n        {isOpen && (\r\n          <Lightbox\r\n            mainSrc={images[photoIndex].IMAGE}\r\n            nextSrc={images[(photoIndex + 1) % images.length].IMAGE}\r\n            prevSrc={images[(photoIndex + images.length - 1) % images.length].IMAGE}\r\n            imageTitle={`${images[photoIndex].TAG}, ${images[photoIndex].DATE}`}\r\n            imageCaption={images[photoIndex].DESCRIPTION}\r\n            onCloseRequest={() => this.setState({ isOpen: false })}\r\n            onMovePrevRequest={() =>\r\n              this.setState({\r\n                photoIndex: (photoIndex + images.length - 1) % images.length,\r\n              })\r\n            }\r\n            onMoveNextRequest={() =>\r\n              this.setState({\r\n                photoIndex: (photoIndex + 1) % images.length,\r\n              })\r\n            }\r\n          />\r\n        )}        \r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Gallery;","/**\r\n * Currently handles formatting of DATE propery\r\n * @todo extend to validate/format other properties\r\n */ \r\nexport const formatResponse = (response) => {\r\n  const clean = response.map(image => {\r\n    const date = new Date(Date.parse(image.DATE)).toLocaleDateString();\r\n    return {\r\n      ...image,\r\n      DATE: date\r\n    }\r\n  });\r\n  return clean;\r\n}","import * as ActionTypes from './actionTypes';\r\nimport axios from 'axios';\r\nimport mockData from '../data';\r\nimport { formatResponse } from '../utils/validation';\r\n\r\n// Mock promise used in place of API which is throwing\r\n// 503 error- http://gsx2json.com/api?id=1wZa0Gx2yAFDyMVayzRn428SDXCOJHOL-0_IX9uLiWW0\r\nconst mockPromise = new Promise(resolve => {\r\n  setTimeout(() => {\r\n    resolve(mockData);\r\n  }, 500);\r\n})\r\n\r\n/**\r\n * Plain actions below\r\n */\r\nexport const returnImages = (images) => {\r\n  return {\r\n    type: ActionTypes.RETURN_IMAGES,\r\n    images\r\n  }\r\n}\r\n/**\r\n * Async actions below\r\n */\r\nexport const requestImages = () => async (dispatch) => {\r\n  try {\r\n    // const response = await axios.get(galleryUrl);\r\n    const response = await mockPromise;\r\n    const cleanResponse = formatResponse(response);\r\n    return dispatch(returnImages(cleanResponse))\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\n","export const RETURN_IMAGES = 'RETURN_IMAGES';\r\n","import { requestImages, returnImages } from '../../redux/actions';\r\n\r\n// Makes request for images\r\nexport const handleRequestImages = (dispatch) => (\r\n  dispatch(requestImages())\r\n);\r\n\r\n// Sorts images and updates redux store \r\nexport const handleSortImages = (sortType, images, dispatch) => {\r\n  switch(sortType) {\r\n    case 'sort_by_date_desc' :\r\n      const sorted_by_date_desc = images.slice().sort((a,b) => {\r\n        return new Date(b.DATE) - new Date(a.DATE);\r\n      });\r\n      return dispatch(returnImages(sorted_by_date_desc));\r\n    case 'sort_by_date_asc' :\r\n      const sorted_by_date_asc = images.slice().sort((a,b) => {\r\n        return new Date(a.DATE) - new Date(b.DATE);\r\n      });\r\n      return dispatch(returnImages(sorted_by_date_asc));\r\n    case 'sort_by_active' :\r\n      const sorted_by_active = images.slice().sort((a,b) => {\r\n        return a.ACTIVE > b.ACTIVE ? 1 : -1\r\n      });\r\n      return dispatch(returnImages(sorted_by_active));\r\n    default :\r\n      return images;\r\n  }\r\n}\r\n","import { connect } from 'react-redux';\r\nimport Gallery from './view';\r\n\r\nimport { handleRequestImages, handleSortImages } from './handlers';\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  handleRequestImages: () => handleRequestImages(dispatch),\r\n  handleSortImages: (sortType, images) => handleSortImages(sortType, images, dispatch),\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n  images: state.images,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Gallery);\r\n","import React from 'react';\r\nimport { Gallery } from './components/Gallery';\r\nimport './App.css';\r\nimport 'react-image-lightbox/style.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Gallery />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const initialState = {\r\n  images: [],\r\n}\r\nexport default function reducer(state = initialState, action) {\r\n  switch(action.type) {\r\n    case 'RETURN_IMAGES' :\r\n      return Object.assign({}, state, {\r\n        images: action.images,\r\n      });\r\n    default :\r\n      return state;\r\n  };\r\n}\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './reducer';\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  compose(\r\n    applyMiddleware(thunk),\r\n  ),\r\n);\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>, \r\n  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}